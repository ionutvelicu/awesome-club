/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface AuthRequest
 */
export interface AuthRequest {
  /**
   *
   * @type {string}
   * @memberof AuthRequest
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof AuthRequest
   */
  password: string;
  /**
   *
   * @type {boolean}
   * @memberof AuthRequest
   */
  isAuthor?: boolean;
}
/**
 *
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  token: string;
}
/**
 *
 * @export
 * @interface AuthStatus
 */
export interface AuthStatus {
  /**
   *
   * @type {boolean}
   * @memberof AuthStatus
   */
  loggedIn: boolean;
  /**
   *
   * @type {string}
   * @memberof AuthStatus
   */
  label: string;
  /**
   *
   * @type {boolean}
   * @memberof AuthStatus
   */
  isAuthor: boolean;
}
/**
 *
 * @export
 * @interface BuyProductResponse
 */
export interface BuyProductResponse {
  /**
   *
   * @type {boolean}
   * @memberof BuyProductResponse
   */
  success: boolean;
  /**
   *
   * @type {string}
   * @memberof BuyProductResponse
   */
  purchaseId: string;
}
/**
 *
 * @export
 * @interface MemberProductDto
 */
export interface MemberProductDto {
  /**
   *
   * @type {string}
   * @memberof MemberProductDto
   */
  purchaseId: string;
  /**
   *
   * @type {number}
   * @memberof MemberProductDto
   */
  progress: number;
  /**
   *
   * @type {boolean}
   * @memberof MemberProductDto
   */
  complete: boolean;
  /**
   *
   * @type {ProductDto}
   * @memberof MemberProductDto
   */
  product: ProductDto;
}
/**
 *
 * @export
 * @interface MemberProductLightDto
 */
export interface MemberProductLightDto {
  /**
   *
   * @type {string}
   * @memberof MemberProductLightDto
   */
  purchaseId: string;
  /**
   *
   * @type {number}
   * @memberof MemberProductLightDto
   */
  progress: number;
  /**
   *
   * @type {boolean}
   * @memberof MemberProductLightDto
   */
  complete: boolean;
  /**
   *
   * @type {string}
   * @memberof MemberProductLightDto
   */
  name: string;
}
/**
 *
 * @export
 * @interface MemberProductStatusDto
 */
export interface MemberProductStatusDto {
  /**
   *
   * @type {boolean}
   * @memberof MemberProductStatusDto
   */
  purchased: boolean;
}
/**
 *
 * @export
 * @interface ProductDto
 */
export interface ProductDto {
  /**
   *
   * @type {string}
   * @memberof ProductDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ProductDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProductDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ProductDto
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof ProductDto
   */
  hero: string;
  /**
   *
   * @type {number}
   * @memberof ProductDto
   */
  price: number;
  /**
   *
   * @type {string}
   * @memberof ProductDto
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof ProductDto
   */
  data: string;
  /**
   *
   * @type {string}
   * @memberof ProductDto
   */
  authorId: string;
  /**
   *
   * @type {string}
   * @memberof ProductDto
   */
  authorName: string;
}

/**
 * AuthResourceApi - axios parameter creator
 * @export
 */
export const AuthResourceApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/public/auth/status`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AuthRequest} authRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (
      authRequest: AuthRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'authRequest' is not null or undefined
      assertParamExists("login", "authRequest", authRequest);
      const localVarPath = `/public/auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AuthRequest} authRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: async (
      authRequest: AuthRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'authRequest' is not null or undefined
      assertParamExists("register", "authRequest", authRequest);
      const localVarPath = `/public/auth/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthResourceApi - functional programming interface
 * @export
 */
export const AuthResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AuthResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStatus(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthStatus>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getStatus(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthResourceApi.getStatus"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {AuthRequest} authRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      authRequest: AuthRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(
        authRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthResourceApi.login"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {AuthRequest} authRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async register(
      authRequest: AuthRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.register(
        authRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthResourceApi.register"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthResourceApi - factory interface
 * @export
 */
export const AuthResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthResourceApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatus(options?: RawAxiosRequestConfig): AxiosPromise<AuthStatus> {
      return localVarFp
        .getStatus(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AuthRequest} authRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(
      authRequest: AuthRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthResponse> {
      return localVarFp
        .login(authRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AuthRequest} authRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(
      authRequest: AuthRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthResponse> {
      return localVarFp
        .register(authRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthResourceApi - object-oriented interface
 * @export
 * @class AuthResourceApi
 * @extends {BaseAPI}
 */
export class AuthResourceApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthResourceApi
   */
  public getStatus(options?: RawAxiosRequestConfig) {
    return AuthResourceApiFp(this.configuration)
      .getStatus(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthRequest} authRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthResourceApi
   */
  public login(authRequest: AuthRequest, options?: RawAxiosRequestConfig) {
    return AuthResourceApiFp(this.configuration)
      .login(authRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthRequest} authRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthResourceApi
   */
  public register(authRequest: AuthRequest, options?: RawAxiosRequestConfig) {
    return AuthResourceApiFp(this.configuration)
      .register(authRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MemberResourceApi - axios parameter creator
 * @export
 */
export const MemberResourceApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    convertToAuthor: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/members/author`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MemberResourceApi - functional programming interface
 * @export
 */
export const MemberResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    MemberResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async convertToAuthor(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.convertToAuthor(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MemberResourceApi.convertToAuthor"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * MemberResourceApi - factory interface
 * @export
 */
export const MemberResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = MemberResourceApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    convertToAuthor(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .convertToAuthor(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MemberResourceApi - object-oriented interface
 * @export
 * @class MemberResourceApi
 * @extends {BaseAPI}
 */
export class MemberResourceApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberResourceApi
   */
  public convertToAuthor(options?: RawAxiosRequestConfig) {
    return MemberResourceApiFp(this.configuration)
      .convertToAuthor(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ProductResourceApi - axios parameter creator
 * @export
 */
export const ProductResourceApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buyProduct: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("buyProduct", "id", id);
      const localVarPath = `/products/{id}/buy`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkProductStatus: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("checkProductStatus", "id", id);
      const localVarPath = `/products/{id}/status`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/products`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteProduct", "id", id);
      const localVarPath = `/products/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProduct: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getProduct", "id", id);
      const localVarPath = `/products/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsForAuthor: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/products`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} purchasedId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchasedProductDetails: async (
      purchasedId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'purchasedId' is not null or undefined
      assertParamExists(
        "getPurchasedProductDetails",
        "purchasedId",
        purchasedId,
      );
      const localVarPath = `/products/purchased/{purchasedId}`.replace(
        `{${"purchasedId"}}`,
        encodeURIComponent(String(purchasedId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchasedProducts: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/products/purchased`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {ProductDto} productDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct: async (
      id: string,
      productDto: ProductDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateProduct", "id", id);
      // verify required parameter 'productDto' is not null or undefined
      assertParamExists("updateProduct", "productDto", productDto);
      const localVarPath = `/products/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        productDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} productId
     * @param {string} sectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadProductSectionContent: async (
      productId: string,
      sectionId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'productId' is not null or undefined
      assertParamExists("uploadProductSectionContent", "productId", productId);
      // verify required parameter 'sectionId' is not null or undefined
      assertParamExists("uploadProductSectionContent", "sectionId", sectionId);
      const localVarPath = `/products/{productId}/section/{sectionId}/content`
        .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
        .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProductResourceApi - functional programming interface
 * @export
 */
export const ProductResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ProductResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async buyProduct(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BuyProductResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.buyProduct(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductResourceApi.buyProduct"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkProductStatus(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<MemberProductStatusDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.checkProductStatus(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductResourceApi.checkProductStatus"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createProduct(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createProduct(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductResourceApi.createProduct"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProduct(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductResourceApi.deleteProduct"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProduct(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductResourceApi.getProduct"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProductsForAuthor(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ProductDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getProductsForAuthor(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductResourceApi.getProductsForAuthor"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} purchasedId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPurchasedProductDetails(
      purchasedId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<MemberProductDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPurchasedProductDetails(
          purchasedId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductResourceApi.getPurchasedProductDetails"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPurchasedProducts(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<MemberProductLightDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPurchasedProducts(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductResourceApi.getPurchasedProducts"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {ProductDto} productDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProduct(
      id: string,
      productDto: ProductDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(
        id,
        productDto,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductResourceApi.updateProduct"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} productId
     * @param {string} sectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadProductSectionContent(
      productId: string,
      sectionId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.uploadProductSectionContent(
          productId,
          sectionId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductResourceApi.uploadProductSectionContent"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ProductResourceApi - factory interface
 * @export
 */
export const ProductResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ProductResourceApiFp(configuration);
  return {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buyProduct(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BuyProductResponse> {
      return localVarFp
        .buyProduct(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkProductStatus(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<MemberProductStatusDto> {
      return localVarFp
        .checkProductStatus(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct(options?: RawAxiosRequestConfig): AxiosPromise<ProductDto> {
      return localVarFp
        .createProduct(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteProduct(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProduct(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ProductDto> {
      return localVarFp
        .getProduct(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsForAuthor(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<ProductDto>> {
      return localVarFp
        .getProductsForAuthor(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} purchasedId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchasedProductDetails(
      purchasedId: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<MemberProductDto> {
      return localVarFp
        .getPurchasedProductDetails(purchasedId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchasedProducts(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<MemberProductLightDto>> {
      return localVarFp
        .getPurchasedProducts(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {ProductDto} productDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct(
      id: string,
      productDto: ProductDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .updateProduct(id, productDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} productId
     * @param {string} sectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadProductSectionContent(
      productId: string,
      sectionId: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<string> {
      return localVarFp
        .uploadProductSectionContent(productId, sectionId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProductResourceApi - object-oriented interface
 * @export
 * @class ProductResourceApi
 * @extends {BaseAPI}
 */
export class ProductResourceApi extends BaseAPI {
  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductResourceApi
   */
  public buyProduct(id: string, options?: RawAxiosRequestConfig) {
    return ProductResourceApiFp(this.configuration)
      .buyProduct(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductResourceApi
   */
  public checkProductStatus(id: string, options?: RawAxiosRequestConfig) {
    return ProductResourceApiFp(this.configuration)
      .checkProductStatus(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductResourceApi
   */
  public createProduct(options?: RawAxiosRequestConfig) {
    return ProductResourceApiFp(this.configuration)
      .createProduct(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductResourceApi
   */
  public deleteProduct(id: string, options?: RawAxiosRequestConfig) {
    return ProductResourceApiFp(this.configuration)
      .deleteProduct(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductResourceApi
   */
  public getProduct(id: string, options?: RawAxiosRequestConfig) {
    return ProductResourceApiFp(this.configuration)
      .getProduct(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductResourceApi
   */
  public getProductsForAuthor(options?: RawAxiosRequestConfig) {
    return ProductResourceApiFp(this.configuration)
      .getProductsForAuthor(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} purchasedId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductResourceApi
   */
  public getPurchasedProductDetails(
    purchasedId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ProductResourceApiFp(this.configuration)
      .getPurchasedProductDetails(purchasedId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductResourceApi
   */
  public getPurchasedProducts(options?: RawAxiosRequestConfig) {
    return ProductResourceApiFp(this.configuration)
      .getPurchasedProducts(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {ProductDto} productDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductResourceApi
   */
  public updateProduct(
    id: string,
    productDto: ProductDto,
    options?: RawAxiosRequestConfig,
  ) {
    return ProductResourceApiFp(this.configuration)
      .updateProduct(id, productDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} productId
   * @param {string} sectionId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductResourceApi
   */
  public uploadProductSectionContent(
    productId: string,
    sectionId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ProductResourceApiFp(this.configuration)
      .uploadProductSectionContent(productId, sectionId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
